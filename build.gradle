apply plugin: 'maven'

allprojects {
    apply plugin: 'groovy'
    apply plugin: 'idea'
    group = 'org.gradle.api.plugins'
    version = '0.9.7'
    defaultTasks 'clean', 'build', 'createAllDeliverables'
}

subprojects {
    def compatibilityVersion = 1.5
    sourceCompatibility = compatibilityVersion
    targetCompatibility = compatibilityVersion
    configurations.compile.transitive = true

    repositories {
        mavenCentral()
    }

    dependencies {
        groovy localGroovy()
        testCompile 'junit:junit:4.11'
    }
}

task uberJar(type: Jar, dependsOn: subprojects.assemble) {
    description = 'Creates Uberjar.'

    subprojects.each { project ->
        from project.configurations.archives.allArtifacts.files.collect { zipTree(it) }
    }

    manifest {
        attributes 'Implementation-Title': 'Gradle Tomcat plugin',
                   'Implementation-Version': version,
                   'Built-By': System.getProperty('user.name'),
                   'Built-Date': new Date(),
                   'Built-JDK': System.getProperty('java.version'),
                   'Built-Gradle': gradle.gradleVersion
    }
}

task sourcesJar(type: Jar) {
    description = 'Creates sources JAR.'
    classifier = 'sources'

    subprojects.each { project ->
        from project.sourceSets.main.allSource
    }
}

ext.groovyDocsDir = 'build/docs/groovydoc'

task aggregateGroovydocs(type: Groovydoc, dependsOn: subprojects.groovydoc) {
    description = 'Creates Groovydocs.'

    ext.title = "Gradle Tomcat plugin ($version)"
    docTitle title
    windowTitle title
    source subprojects.groovydoc.source
    destinationDir file(groovyDocsDir)
    classpath = files(subprojects.groovydoc.classpath)
    groovyClasspath = project(':plugin').groovydoc.groovyClasspath
}

task groovydocJar(type: Jar, dependsOn: aggregateGroovydocs) {
    description = 'Creates GroovyDocs JAR.'
    classifier = 'javadoc'

    from groovyDocsDir
}

task createAllDeliverables(dependsOn: [uberJar, sourcesJar, groovydocJar]) {
    description = 'Creates all deliverables including plugin JAR, sources JAR and Groovydoc JAR.'
}

task wrapper(type: Wrapper) {
    gradleVersion = '1.3'
}

artifacts {
    archives uberJar
    archives sourcesJar
    archives groovydocJar
}

ext.pomConfiguration = {
    name 'Gradle Tomcat plugin'
    description 'Gradle plugin supporting deployment of your web application to an embedded Tomcat web container.'
    url 'https://github.com/bmuschko/gradle-tomcat-plugin'
    inceptionYear '2010'

    scm {
        url 'https://github.com/bmuschko/gradle-tomcat-plugin'
        connection 'scm:https://bmuschko@github.com/bmuschko/gradle-tomcat-plugin.git'
        developerConnection 'scm:git://github.com/bmuschko/gradle-tomcat-plugin.git'
    }

    licenses {
        license {
            name 'The Apache Software License, Version 2.0'
            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
            distribution 'repo'
        }
    }

    developers {
        developer {
            id 'bmuschko'
            name 'Benjamin Muschko'
            email 'benjamin.muschko@gmail.com'
        }
    }
}

install {
    repositories.mavenInstaller {
        pom.project pomConfiguration
    }
}

if(hasProperty('nexusUsername') && hasProperty('nexusPassword')) {
    apply plugin: 'signing'

    signing {
        required { gradle.taskGraph.hasTask(uploadArchives) && !version.endsWith('SNAPSHOT') }
        sign configurations.archives
    }

    uploadArchives {
        repositories.mavenDeployer {
            beforeDeployment { deployment ->
                signing.signPom(deployment)
            }

            name = 'mavenCentralReleaseDeployer'

            repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
                authentication(userName: nexusUsername, password: nexusPassword)
                releases(updatePolicy: 'always')
            }

            pom.project pomConfiguration
        }
    }
}

idea.project {
    jdkName = '1.6'

    ipr.withXml { provider ->
        def node = provider.asNode()

        // Use GIT
        def vcsConfig = node.component.find { it.'@name' == 'VcsDirectoryMappings' }
        vcsConfig.mapping[0].'@vcs' = 'Git'

        // Set Gradle home
        def gradleSettings = node.appendNode('component', [name: 'GradleSettings'])
        gradleSettings.appendNode('option', [name: 'SDK_HOME', value: gradle.gradleHomeDir])
    }
}
